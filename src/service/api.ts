/**
 * @fileoverview API Service Layer for Vitura Healthcare Prescription Management System
 * 
 * This module provides the API service functions for communicating with the backend.
 * It handles all HTTP requests for patient and prescription data management.
 * 
 * Functions include:
 * - Patient data retrieval and management
 * - Prescription creation and history retrieval
 * - Error handling and response processing
 * 
 * @author Vinay Kumar P
 * @version 1.0.0
 * @since 2025
 */

import axios from 'axios';
import type { Patient } from '../interface/Patient';
import type { Prescription } from '../interface/Prescription';

/**
 * Base URL for the API endpoints
 * Points to the local development server
 */
const API_BASE = 'https://localhost:7046/api';

/**
 * Retrieves all patients from the API
 * 
 * This function makes an HTTP GET request to fetch all patient records
 * from the backend server. It returns a promise that resolves to an array
 * of patient objects.
 * 
 * @returns {Promise<Patient[]>} Promise that resolves to an array of patient objects
 * @throws {Error} If the API request fails or network error occurs
 */
export const getPatients = async (): Promise<Patient[]> => {
  const res = await axios.get(`${API_BASE}/Patients`);
  return res.data;
};

/**
 * Retrieves all prescriptions from the API
 * 
 * This function makes an HTTP GET request to fetch all prescription records
 * from the backend server. It returns a promise that resolves to an array
 * of prescription objects.
 * 
 * @returns {Promise<Prescription[]>} Promise that resolves to an array of prescription objects
 * @throws {Error} If the API request fails or network error occurs
 */
export const getPrescriptions = async (): Promise<Prescription[]> => {
  const res = await axios.get(`${API_BASE}/prescriptions`);
  return res.data;
};

/**
 * Creates a new prescription
 * 
 * This function makes an HTTP POST request to create a new prescription
 * in the backend system. It accepts prescription data without the ID and
 * patientName fields (which are generated by the server).
 * 
 * @param {Omit<Prescription, 'id' | 'patientName'>} data - The prescription data to create
 * @returns {Promise<Prescription>} Promise that resolves to the created prescription object
 * @throws {Error} If the API request fails or validation errors occur
 */
export const createPrescription = async (data: Omit<Prescription, 'id' | 'patientName'>) => {
  const res = await axios.post(`${API_BASE}/prescriptions`, data);
  return res.data;
};
